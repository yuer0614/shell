#!/bin/bash

#one

#当你从命令行中运行一个程序的时候，Linux系统会搜索一系列目录来查找对应的文件。这 些目录被定义在环境变量PATH中。如果你想找出系统中有哪些可执行文件可供使用，只需要扫 描PATH环境变量中所有的目录就行了。如果要徒手查找的话，就得花点时间了。不过我们可以 编写一个小小的脚本，轻而易举地搞定这件事。首先是创建一个for循环，对环境变量PATH中的目录进行迭代。处理的时候别忘了设置IFS 分隔符。

function a(){

IFS=:				#设置for循环中的变量只能以冒号当作分隔符

for a in $PATH 			#$PATH中的目录的值当作循环的变量导入变量中，/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin之前设置了分隔符：最终得到的变量有：
				#1、/usr/local/sbin 2、/usr/local/bin 3、/usr/sbin 4、/usr/bin 5、/root/bin 共五个变量
do
  echo "$a:  "			#每次循环的时候把当前变量输出出来
  for b in $a/*			#把外循环的变量加上/*生成一个新的变量，内循环是把之前五个目录中的所有文件全部滤历一遍
  do
    if [ -x "$b" ] 
    then 
    echo "     $b"
    fi
  done
done > a.txt
}
a


#two

#shell脚本的目标是让系统管理员过得更轻松。如果你碰巧工作在一个拥有大量用户的环境 中，最烦人的工作之一就是创建新用户账户。好在可以使用while循环来降低工作的难度。你不用为每个需要创建的新用户账户手动输入useradd命令，而是可以将需要添加的新用 账户放在一个文本文件中，然后创建一个简单的脚本进行处理。这个文本文件的格式如下:userid,user name第一个条目是你为新用户账户所选用的用户ID。第二个条目是用户的全名。两个值之间使用逗号分隔，这样就形成了一种名为逗号分隔值的文件格式(或者是.csv)。这种文件格式在电子表 格中极其常见，所以你可以轻松地在电子表格程序中创建用户账户列表，然后将其保存成.csv格式，以备shell脚本读取及处理。


function b(){
input=“users.csv”
while IFS=',' read -r userid name
do 
  echo "增加用户 $userid"
  useradd -c "$name" -m "$userid"
done < $input
}
#b

#循环是编程的一部分。bash shell提供了三种可用于脚本中的循环命令。 for命令允许你遍历一系列的值，不管是在命令行里提供好的、包含在变量中的还是通过文件扩展匹配获得的文件名和目录名。 
#while命令使用普通命令或测试命令提供了基于命令条件的循环。只有在命令(或条件)产生退出状态码0时，while循环才会继续迭代指定的一组命令。
# until命令也提供了迭代命令的一种方法，但它的迭代是建立在命令(或条件)产生非零退出状态码的基础上。这个特性允许你设置一个迭代结束前都必须满足的条件。
# 可以在shell脚本中对循环进行组合，生成多层循环。bash shell提供了continue和break命令，允许你根据循环内的不同值改变循环的正常流程。
#bash shell还允许使用标准的命令重定向和管道来改变循环的输出。你可以使用重定向来将循环的输出重定向到一个文件或是另一个命令。这就为控制shell脚本执行提供了丰富的功能。
